// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PowerCards.DAL;

#nullable disable

namespace PowerCards.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("PowerCards.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeckID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hint")
                        .HasColumnType("TEXT");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("CardID");

                    b.HasIndex("DeckID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("PowerCards.Models.Deck", b =>
                {
                    b.Property<int>("DeckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Subject")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DeckID");

                    b.HasIndex("Username");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("PowerCards.Models.Favorite", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("DeckID")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Username", "DeckID");

                    b.HasIndex("DeckID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("PowerCards.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PowerCards.Models.Card", b =>
                {
                    b.HasOne("PowerCards.Models.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("PowerCards.Models.Deck", b =>
                {
                    b.HasOne("PowerCards.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("Username");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PowerCards.Models.Favorite", b =>
                {
                    b.HasOne("PowerCards.Models.Deck", "Deck")
                        .WithMany("Favorites")
                        .HasForeignKey("DeckID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PowerCards.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PowerCards.Models.Deck", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("PowerCards.Models.User", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
